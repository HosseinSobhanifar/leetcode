class Solution(object):
    def missingNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums.sort()
        length = len(nums)
        first = 0
        end = length - 1
        while True:
            mid = (end - first) // 2 + first

            if first == end:
                if nums[first] == first:
                    return(length)
                else:
                    return(first)

            if nums[mid] == mid:
                first = mid + 1

            else:
                end = mid
# ----------------------------------------------------------------------- LeetCode ----------------------------------------------------------------------------

# These only use O(1) extra space.
def missingNumber(self, nums):
    n = len(nums)
    return n * (n+1) / 2 - sum(nums)           
# ----------------------------------------------------------------------- LeetCode ----------------------------------------------------------------------------

# Xor-ing the given numbers and 0..n.
nums = [9, 6, 4, 2, 3, 5, 7, 0, 1]
my_list = nums + list(range(len(nums) + 1))


def missingNumber(nums):
    return reduce(operator.xor, my_list)


print(missingNumber(nums))
# ----------------------------------------------------------------------- LeetCode ----------------------------------------------------------------------------


def missingNumber(self, nums):
    n = len(nums)
    return reduce(operator.xor, nums) ^ [n, 1, n+1, 0][n % 4]
