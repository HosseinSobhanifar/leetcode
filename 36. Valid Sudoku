def hor(input, digit, i, j):
    for k in range(9):
        if digit == input[i][k] and k != j:
            return False
    return True


def ver(input, digit, i, j):
    for k in range(9):
        if digit == input[k][j] and k != i:
            return False
    return True

def squ(input, i, j, digit):
    I = i // 3
    J = j // 3
    for m in range(I*3, 3 + (I*3)):
        for n in range(J*3, 3 + (J * 3)):
            if digit == input[m][n] and m != i and n != j:
                return False
    return True


board = [[".", ".", ".", ".", "5", ".", ".", "1", "."],
         [".", "4", ".", "3", ".", ".", ".", ".", "."],
         [".", ".", ".", ".", ".", "3", ".", ".", "1"],
         ["8", ".", ".", ".", ".", ".", ".", "2", "."],
         [".", ".", "2", ".", "7", ".", ".", ".", "."],
         [".", "1", "5", ".", ".", ".", ".", ".", "."],
         [".", ".", ".", ".", ".", "2", ".", ".", "."],
         [".", "2", ".", "9", ".", ".", ".", ".", "."],
         [".", ".", "4", ".", ".", ".", ".", ".", "."]]

for i in range(9):
    for j in range(9):
        if board[i][j] != ".":
            number = board[i][j]
            ans_h = hor(input=board, i=i, j=j, digit=number)
            if ans_h == False:
                print(f"(i, j) = ({i}, {j}), digit = {board[i][j]}")
            ans_v = ver(input=board, i=i, j=j, digit=number)
            if ans_v == False:
                print(f"(i, j) = ({i}, {j}), digit = {board[i][j]}")
            ans_s = squ(input=board, i=i, j=j, digit=number)
            if ans_s == False:
                print(f"(i, j) = ({i}, {j}), digit = {board[i][j]}")
# -------------------------------------------------------------------------------  nice Solution  ---------------------------------------------------------------------

board = [["5", "3", ".", ".", "7", ".", ".", ".", "."]
    , ["6", ".", ".", "1", "9", "5", ".", ".", "."]
    , [".", "9", "8", ".", ".", ".", ".", "6", "."]
    , ["8", ".", ".", ".", "6", ".", ".", ".", "3"]
    , ["4", ".", ".", "8", ".", "3", ".", ".", "1"]
    , ["7", ".", ".", ".", "2", ".", ".", ".", "6"]
    , [".", "6", ".", ".", ".", ".", "2", "8", "."]
    , [".", ".", ".", "4", "1", "9", ".", ".", "5"]
    , [".", ".", ".", ".", "8", ".", ".", "7", "9"]]

print(list(zip(*board)))

class Solution(object):
    """
        :type board: List[List[str]]
        :rtype: bool
    """

    def isValidSudoku(self, board):
        def is_valid_row(board):
            for row in board:
                if not is_valid(row):
                    return False
            return True

        def is_valid_column(board):
            for col in zip(*board):
                if not is_valid(col):
                    return False
            return True

        def is_valid_square(board):
            for i in (0, 3, 6):
                for j in (0, 3, 6):
                    square = [board[x][y] for x in range(i, i + 3)
                              for y in range(j, j + 3)]
                    if not is_valid(square):
                        return False
            return True

        def is_valid(value):
            res = [i for i in value if i != '.']
            return len(res) == len(set(res))

        return is_valid_row(board) and is_valid_column(board) and is_valid_square(board)


solution = Solution()
solution.isValidSudoku(board=board)
print(solution.isValidSudoku(board=board))

