nums = ["111", "011", "001"]
length = len(nums[0])
final_ans = []


def binary(temp):
    for i in range(2):
        temp += f"{i}"                          # this syntax does not work at LeetCode
        if len(temp) < length:
          binary(temp)
                

        else:
            if temp not in nums:
              final_ans.append(temp)           # obtains all the possible solution
                

        temp = temp[:-1]


temp = ""
binary(temp=temp)
print(final_ans)
# ---------------------------------------------------------------------------------------------------

nums = ["111", "011", "001"]
length = len(nums[0])
final_ans = []


def binary(temp):
    for i in ["0", "1"]:
        temp += i
        if len(temp) < length:
            if binary(temp):
                return True

        else:
            if temp not in nums:
                final_ans.append(temp)
                return True                 # this terminates the function as soon as it yileds the first possible solution

        temp = temp[:-1]


temp = ""
binary(temp=temp)
print(final_ans[0])
# ------------------------------------------LeetCode----------------------------------------------

# this algorithm is  similar to Cantor's Diagonalization:
# https://leetcode.com/problems/find-unique-binary-string/discuss/1418687/Detailed-Explanation-O(N)-Java-C%2B%2B-Python-short-concise-code-Cantor's-Diagonalization

class Solution(object):
    def findDifferentBinaryString(self, nums):
        ans='';
        for i,num in enumerate(nums):
            ans+= '1' if(num[i]=='0') else '0'       #ternary if else
			#ans+= str(1- int(num[i]));              # Alternate: cast to string & 1-x to flip
        return ans;
