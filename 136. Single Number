from operator import xor
from functools import reduce

nums = [2,2,1, 1, -5]

ans = reduce(xor, nums)
print(ans)
# ------------------------------------------------------------------ LeetCode -----------------------------------------------------------------------------------------

Think it through || Time: O(n) Space: O(1) || Python Explained:
https://leetcode.com/problems/single-number/discuss/1771771/Think-it-through-oror-Time%3A-O(n)-Space%3A-O(1)-oror-Python-Explained
# ------------------------------------------------------------------ LeetCode -----------------------------------------------------------------------------------------

def singleNumber1(self, nums):
    dic = {}
    for num in nums:
        dic[num] = dic.get(num, 0)+1
    for key, val in dic.items():
        if val == 1:
            return key

def singleNumber2(self, nums):
    res = 0
    for num in nums:
        res ^= num
    return res
    
def singleNumber3(self, nums):
    return 2*sum(set(nums))-sum(nums)
    
def singleNumber4(self, nums):
    return reduce(lambda x, y: x ^ y, nums)
    
def singleNumber(self, nums):
    return reduce(operator.xor, nums)
