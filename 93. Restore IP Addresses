s = "101023"


def valid(inp):                                                                   # check the type of inputs
    if len(inp) == 0:
        return False
    elif len(inp) > 1 and inp[0] == "0":
        return False
    return 0 <= int(inp) <= 255


def seg(part, start, temp, ans):
    part += 1
    print("----------------------------------------------")
    print(f"part = {part}")

    if part == 4:
        integer = s[start:]
        print(f"integer = {integer}")
        if valid(integer):
            temp.append(integer)

            ans.append(temp[0]+"."+temp[1]+"."+temp[2]+"."+temp[3])
            # ans.append(temp)
            # ans = ans + temp
            print(f"temp = {temp}")
            print(f"ans = {ans}")
            print("----------------------------------------------")
            temp.pop()                                                            # this pop() in backtracking algorithm    
            print(f"ans = {ans}")
        return                                                                    # this last return is important in backtracking algorithms.
    for i in range(1, 4):
        integer = s[start:start + i]
        print(f"part = {part}")
        print(f"integer = {integer}")

        # print(f"temp_before = {temp}")
        # temp = temp[:part]
        # print(f"temp_after = {temp}")
        if valid(integer):
            # if len(temp) == part:
            #     print(f"pop_part={part}")
            #     temp.pop()
            temp = temp[:part-1]
            temp.append(integer)
            print(f"temp = {temp}")
            seg(part=part, start=start + i, temp=temp, ans=ans)
            print("----------------------------------------------")


ans = []
seg(part=0, start=0, temp=[], ans=ans)
print(ans)
# a = s[3:]
# print(a)
# print(len(a) > 1)
# print(a[0])
# print(a[0] == "0")
# print(valid(a))
