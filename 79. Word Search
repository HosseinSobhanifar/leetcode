# this code is not optimized
pos = []

def finder(i, R, C, pos):
    if i == len(word):                       # the end of the journey
        return True

    for row in range(len(board)):
        for column in range(len(board[0])):
            if board[row][column] == word[i] and [row, column] not in pos:
                pos.append([row, column])

                if i == 0:
                    if finder(i + 1, row, column, pos):               # going to the next stage
                        return True

                elif abs(row - R) == 1 and column == C or abs(column - C) == 1 and row == R:
                    if finder(i + 1, row, column, pos):
                        return True
                pos.pop()

    if i >= 1:                                # backtracking
        return

    if i == 0:                                   # the end of the journey
        return False


i = 0
print(finder(i=i, R=None, C=None, pos=pos))
print(f"pos = {pos}")
# ------------------------------------------------------------------------------------------------------------------------------------

this code is optimized

pos = []

def finder(i, R, C, pos):
    print("----------------------------------")
    print(f"i = {i}")

    print(f"pos = {pos}")

    if i == len(word):
        print(f"i = {i}")
        print(f"pos = {pos}")
        return True
    print(f"word[i] = {word[i]}")
    if i == 0:
        for row in range(len(board)):
            for column in range(len(board[0])):
                if board[row][column] == word[i]:
                    pos.append([row, column])
                    if finder(i + 1, row, column, pos):
                        return True
                    pos.pop()

    if R + 1 < len(board) and board[R + 1][C] == word[i] and [R + 1, C] not in pos:
        pos.append([R + 1, C])
        if finder(i + 1, R + 1, C, pos):
            return True
        pos.pop()

    if R - 1 >= 0 and board[R - 1][C] == word[i] and [R - 1, C] not in pos:
        pos.append([R - 1, C])
        if finder(i + 1, R - 1, C, pos):
            return True
        pos.pop()

    if C+1 < len(board[0]) and board[R][C+1] == word[i] and [R, C + 1] not in pos:
        pos.append([R, C+1])
        if finder(i + 1, R, C + 1, pos):
            return True
        pos.pop()

    if C - 1 >= 0 and board[R][C - 1] == word[i] and [R, C - 1] not in pos:
        pos.append([R, C - 1])
        if finder(i + 1, R, C - 1, pos):
            return True
        pos.pop()

    if i >= 1:
        return

    if i == 0:
        return False

i = 0
print(finder(i=i, R=0, C=0, pos=pos))
print(f"pos = {pos}")
# ------------------------------------------------------------------------------------------------------------------------------------
# Python dfs solution with comments.
# https://leetcode.com/problems/word-search/discuss/27660/Python-dfs-solution-with-comments.

def exist(self, board, word):
    if not board:
        return False
    for i in xrange(len(board)):
        for j in xrange(len(board[0])):
            if self.dfs(board, i, j, word):
                return True
    return False

# check whether can find word, start at (i,j) position    
def dfs(self, board, i, j, word):
    if len(word) == 0: # all the characters are checked
        return True
    if i<0 or i>=len(board) or j<0 or j>=len(board[0]) or word[0]!=board[i][j]:
        return False
    tmp = board[i][j]  # first character is found, check the remaining part
    board[i][j] = "#"  # avoid visit agian 
    # check whether can find "word" along one direction
    res = self.dfs(board, i+1, j, word[1:]) or self.dfs(board, i-1, j, word[1:]) \
    or self.dfs(board, i, j+1, word[1:]) or self.dfs(board, i, j-1, word[1:])
    board[i][j] = tmp
    return res
# ------------------------------------------------------------------------------------------------------------------------------------
# [Python] dfs backtracking solution, explained
# https://leetcode.com/problems/word-search/discuss/747144/Python-dfs-backtracking-solution-explained

class Solution:
    def exist(self, board, word):
        def dfs(ind, i, j):
            if self.Found: return        #early stop if word is found

            if ind == k:
                self.Found = True                #for early stopping
                return 

            if i < 0 or i >= m or j < 0 or j >= n: return 
            tmp = board[i][j]
            if tmp != word[ind]: return

            board[i][j] = "#"
            for x, y in [[0,-1], [0,1], [1,0], [-1,0]]:
                dfs(ind + 1, i+x, j+y)
            board[i][j] = tmp
        
        self.Found = False
        m, n, k = len(board), len(board[0]), len(word)
        
        for i, j in product(range(m), range(n)):
            if self.Found: return True          #early stop if word is found
            dfs(0, i, j)
        return self.Found
